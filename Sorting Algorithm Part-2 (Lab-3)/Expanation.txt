Taks-1:
1. Divided the array into two parts
2. Sorted the arrays
3. While sorting if ith element of left array is greated than jth element right arraay, 
it means ith element and all the elements after ith element have number greater than itself in the right. Thats why, I increased the count.

Task-2:
1. divided the array into two parts
2. lss refers to the maximum finding from left array, rss refers to the maximum finding from the right array. 
3. In css I took the maximum from left array, an element whose square is maxuimum from the rigth array and added them to get maximum finding. 
4. Answer would be the largest one amomg lss, rss, css.

Task-3:
1. Assumed 0th index at pivot. 
2. Put the pivot in the right place by swaping operation
3. Divided the array and did the same procedure untill the length become 1.

Task-4:
1. Used the partition method of Quick Sort.
2. At first put the pivot at right position. Checked the position of the pivot.
3. If the position is greater than the query, then the query is in the left side of the array. So, did the same with the left array untill position=query-1.
3. If the position is less than the query, then the query is in the right side of the array. So, did the same with the right array untill position=query-1:

